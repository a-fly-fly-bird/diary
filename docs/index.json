[{"content":"日拱一卒，功不唐捐。\n","date":"8 November 2023","permalink":"/posts/","section":"","summary":"日拱一卒，功不唐捐。","title":""},{"content":" Three Pillars to Write Good HTML and CSS\u0026hellip; And Build Good Websites # Responsive Design Fluid layouts Media queries Responsive images Correct units Desktop-first v.s. mobile-first Maintainable and Scalable Code Clean Easy-to-understand Growth Reusable How to organize files How to name classes How to structure HTML Web Performance Less HTTP requests Less code Compress code Use a CSS preprocessor Less images Compress images 网页渲染过程 # 这部分也是很大的内容，我之前正好做过相关的笔记，哪天有空也放上来。\n","date":"8 November 2023","permalink":"/posts/2023/advanced-css-study-notes-section-ii/","section":"","summary":"Three Pillars to Write Good HTML and CSS\u0026hellip; And Build Good Websites # Responsive Design Fluid layouts Media queries Responsive images Correct units Desktop-first v.","title":"Advanced Css Study Notes Section II"},{"content":"","date":"8 November 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"8 November 2023","permalink":"/tags/css/","section":"Tags","summary":"","title":"CSS"},{"content":"","date":"8 November 2023","permalink":"/tags/sass/","section":"Tags","summary":"","title":"Sass"},{"content":"","date":"8 November 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"8 November 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"8 November 2023","permalink":"/categories/%E5%89%8D%E7%AB%AF/","section":"Categories","summary":"","title":"前端"},{"content":"","date":"8 November 2023","permalink":"/series/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/","section":"Series","summary":"","title":"前端基础从入门到入土"},{"content":"","date":"8 November 2023","permalink":"/tags/%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"学习"},{"content":"","date":"8 November 2023","permalink":"/tags/%E7%AC%94%E8%AE%B0/","section":"Tags","summary":"","title":"笔记"},{"content":"我的 Udemy排名第一的高级CSS课程 Advanced CSS and Sass - 高级 CSS 和 Sass：Flexbox、网格、动画（中英文字幕）笔记。\n想要系统学习CSS， mdn web docs会是不错的文档。\nfont-family # 可以通过在html的header中引入字体然后\nbody { font-family: \u0026#39;Long Cang\u0026#39;, cursive, Georgia, \u0026#39;Times New Roman\u0026#39;, Times, serif; font-weight: 400; font-size: 16px; line-height: 1.7; color: #777; } 这样使用。\n注意font-family这行的语法，是优先级从高到低的字体列表。每一个css字段似乎都有这样的规则，我这样写也是不会抱错的：\nfont-size: 16px, 18px, 20px; 因为是优先级从高到低的列表，那我就可以：\nbackground-image: linear-gradient(to right bottom, rgba(128, 214, 113, 0.8), rgba(39, 180, 133, 0.8)), url(../img/hero.jpg); 有点像图层，上层是渐变色，下层是图片。\ncss 函数 # 许多 CSS 属性 将 URL 作为属性值，例如 background-image、cursor、@font-face、list-style 等。 url()\nlinear-gradient()\npx 和 vh # 绝对大小和相对大小单位\ndiv 和 行内元素 # div 可以看作一个容器，把行内元素包在容器里。算是一个小的tips吧。\nposition # position有static， relative, absolute, fixed，sticky\u0026hellip;默认position为static，也就是该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。\nabsolute 和 relative # 课程中，老师在\u0026lt;div class=\u0026quot;logo-box\u0026quot;\u0026gt;设置为absolute定位时，特意跑回父元素\u0026lt;header class=\u0026quot;header\u0026quot;\u0026gt;设置为relative定位，很好奇是为什么，然后就搜到了以下知识点：\nCSS 中，为什么绝对定位（absolute）的父级元素必须是相对定位（relative）？ - 丁小倪的回答 - 知乎\n首先，我想告诉你的是，如果父级元素是绝对定位（absolute）或者没有设置，里面的绝对定位（absolute）自动以body定位。这句话是错的。正确的是：只要父级元素设了position并且不是static（默认既是static），那么设定了absolute的子元素即以此为包含块（最近的）。绝对定位（Absolute positioning）元素定位的参照物是其包含块，既相对于其包含块进行定位，不一定是其父元素。建议去详细通读一下定位体系和包含块。\n\u0026lt;img\u0026gt; height # 参考自： HTML 标签的 height 和 width 属性\n图像预留空间 # 为图像指定 height 和 width 属性是一个好习惯。如果设置了这些属性，就可以在页面加载时为图像预留空间。如果没有这些属性，浏览器就无法了解图像的尺寸，也就无法为图像保留合适的空间，因此当图像加载时，页面的布局就会发生变化。（下面的篇幅详细解释了这个观点）。\n改变图像大小 - 制作填充图像 # height 和 width 属性有一种隐藏的特性，就是人们无需指定图像的实际大小，也就是说，这两个值可以比实际的尺寸大一些或小一些。浏览器会自动调整图像，使其适应这个预留空间的大小。使用这种方法就可以很容易地为大图像创建其缩略图，以及放大很小的图像。但需要注意的是：浏览器还是必须要下载整个文件，不管它最终显示的尺寸到底是多大，而且，如果没有保持其原来的宽度和高度比例，图像会发生扭曲。\nand # HTML \u0026lt;span\u0026gt; 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者 Id 属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。\u0026lt;span\u0026gt; 与 \u0026lt;div\u0026gt; 元素很相似，但 \u0026lt;div\u0026gt; 是一个 块元素 而 \u0026lt;span\u0026gt; 则是 行内元素 (en-US).\n区别 # Stack Overflow 上有人提出了类似的问题： whats-the-different-between-div-and-span-if-i-set-display-block-or-inline\n答案是：\u0026lt;div\u0026gt;里可以放\u0026lt;span\u0026gt;,但是\u0026lt;span\u0026gt;里不可以放\u0026lt;div\u0026gt;。\ndisplay # CSS display 属性设置元素是否被视为块或者内联元素以及用于子元素的布局，例如流式布局、网格布局或弹性布局。\n形式上，display 属性设置元素的内部和外部的显示类型。外部类型设置元素参与流式布局；内部类型设置子元素的布局。一些 display 值在它们自己的单独规范中完整定义；例如，在 CSS 弹性盒模型的规范中，定义了声明 display: flex 时会发生的细节。\n注意 # 形式上，display 属性设置元素的内部和外部的显示类型。（这是我之前漏掉的很重要的一部分，所以着重强调一下）\n外部表现 # 这些关键字规定元素的外部显示类型，实际上就是其在流式布局中的角色：\nblock # 该元素生成一个块级元素盒，在正常的流中，该元素之前和之后产生换行。\ninline # 该元素生成一个或多个内联元素盒，它们之前或者之后并不会产生换行。在正常的流中，如果有空间，下一个元素将会在同一行上。\n内部表现 # 这些关键字规定了元素的内部显示类型，其定义了该内容布局时的格式上下文的类型（假设它是一个非替换元素）：\nflow 实验性 # 该元素使用流式布局（块和内联布局）来排布它的内容。\n如果它的外部显示类型是 inline 或 run-in，并且它参与一个块或者内联格式上下文，那么它将生成一个内联盒子。否则它将生成一个块容器盒。\n根据其他属性的值（例如 position、float 或 overflow）以及它自身是否参与到块或者内联格式化上下文，它要么为它的内容建立新的块级格式化上下文（BFC），要么将其内容集成到其父元素的格式化上下文中。\nflow-root # 该元素生成一个块级元素盒，其会建立一个新的块级格式化上下文，定义格式化上下文的根元素。\ntable # 该元素的行为类似于 HTML 中的 元素。它定义了一个块级别的盒子。\nflex # 该元素的行为类似块级元素并且根据弹性盒模型布局它的内容。\ngrid # 该元素的行为类似块级元素并且根据网格模型布局它的内容。\ntext-transform # text-transform CSS 属性指定如何将元素的文本大写。它可以用于使文本显示为全大写或全小写，也可单独对每一个单词进行操作。\n也就是说，除了通过JS来设置显示内容的大小写之外，通过CSS也能实现。\ntransform # CSS transform 属性允许你旋转，缩放，倾斜或平移给定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。\n在教程中的用法非常具有参考性，不借助flex等display要将某一子元素相对父元素中心居中，应该怎么办呢？\n.text-box{ position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); } 重点是：transform: translate(-50%, -50%);。\n阅读 transform-function发现，元素左上角是坐标原点，translate(-50%, -50%)相当于向左和向上平移一般，那原来的\n.text-box{ position: absolute; top: 50%; left: 50%; } 是将父元素的左上角固定在距视图top: 50%; left: 50%;的位置，是父元素的左上角居中。使用translate(-50%, -50%)平移子元素后，子元素的中心居中。\n@keyframes # 才知道有 @keyframes这么强大的功能！\n关键帧 @keyframes at-rule 规则通过在动画序列中定义关键帧（或 waypoints）的样式来控制 CSS 动画序列中的中间步骤。和 转换 transition 相比，关键帧 keyframes 可以控制动画序列的中间步骤。\n首先在css中定义关键帧，\n@keyframes moveInLeft{ 0% { opacity: 0; transform: translateX(-100px) rotate(0deg); } 60%{ transform: rotate(60deg); } 80%{ transform: translateX(10px); } 100%{ opacity: 1; transform: translateX(0); } } 然后使用关键帧，类似这样：\n.heading-primary-main{ display: block; font-size: 80px; font-weight: 400; letter-spacing: 35px; animation-name: moveInLeft; animation-duration: 1s; animation-timing-function: ease-in; } 或者缩写为:\nanimation: moveInRight 1s ease-out; 这里是关于 animation-timing-function的介绍，简而言之就是决定是平滑过渡还是怎么过渡。\n伪类(Pseudo-classes) # CSS 伪类是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 :hover 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。\n比如指针悬浮效果：\nbutton:hover { color: blue; } 又非常多的伪类，非常有用。\ndisplay: inline-block # 尽管刚熟悉了inline和block，但是看到这里还是有点迷惑。重点学习一下。\n与 display: inline 相比，主要区别在于 display: inline-block 允许在元素上设置宽度和高度。\n同样，如果设置了 display: inline-block，将保留上下外边距/内边距，而 display: inline 则不会。\n与 display: block 相比，主要区别在于 display：inline-block 在元素之后不添加换行符，因此该元素可以位于其他元素旁边。\ntext-align # 除了之前的transform让元素居中外，还有什么更简单的方法吗？text-align CSS 属性设置块元素或者单元格框的行内内容的水平对齐。\ntext-align属性是用来描述一个行内元素是如何在身为父元素的块级元素中对齐。\n通过定义可以看出text-align属性并不能控制块级元素的对齐方式，它只对块级元素内的行内元素生效。\n所以\n\u0026lt;div class=\u0026#34;text-box\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;heading-primary\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;heading-primary-main\u0026#34;\u0026gt;Outdoors\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;heading-primary-sub\u0026#34;\u0026gt;is where life happens\u0026lt;/span\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;btn btn-white\u0026#34;\u0026gt;Discover Our Tours\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; 中，要想\u0026lt;a href=\u0026quot;#\u0026quot; class=\u0026quot;btn btn-white\u0026quot;\u0026gt;Discover Our Tours\u0026lt;/a\u0026gt;水平居中很简单，只要在它或者它的父元素上声明text-align: center即可。\nbox-shadow # CSS box-shadow 属性用于在元素的框架上添加阴影效果。你可以在同一个元素上设置多个阴影效果，并用逗号将他们分隔开。该属性可设置的值包括阴影的 X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色。\n这个相对好理解。\n伪元素(Pseudo-elements) # 注意区分 伪类 和 伪元素！一个是一个冒号，一个是两个冒号。\n伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。\n比如伪类中的:hover是指当前元素在鼠标悬浮时的状态，而伪元素是选中被选择元素的特定部分。\n::after (:after) # CSS伪元素 ::after用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合content属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。\n不太好理解，还是需要结合教程中的代码理解。\nz-index # CSS z-index 属性设置定位元素及其后代元素或 flex 项目的 Z 轴顺序。z-index 较大的重叠元素会覆盖较小的元素。\n这个MDN的示例非常清晰，就是控制图层的覆盖的。当Z-index的值设置为一个整数时,该整数是当前堆叠上下文中生成的div的堆栈级别。数字越小，越靠前。\n注意 # 只有position的值为relative/absolute/fixed中的一个,Z-index才会生效。\nanimation-fill-mode # CSS 属性 animation-fill-mode 设置 CSS 动画在执行之前和之后如何将样式应用于其目标。\nanimation-fill-mode也是一个非常有用的属性，也就是确定动画播放前和播放后的状态。\n","date":"7 November 2023","permalink":"/posts/2023/advanced-css-study-notes/","section":"","summary":"我的 Udemy排名第一的高级CSS课程 Advanced CSS and Sass - 高级 CSS 和 Sass：Flexbox、网格、动画（中英文字幕）笔记。","title":"Advanced CSS Study Notes Section I"},{"content":"记录是为了更好地生活。\n","date":"6 November 2023","permalink":"/diary/","section":"","summary":"记录是为了更好地生活。","title":""},{"content":"人生列车缓慢地行驶在阳光明媚的午后旷野。若有人向我招手，我便邀请他们坐上一段，听他们分享关于面包，远方和在夜晚流浪的一切，最后微笑着告别。\n","date":"6 November 2023","permalink":"/diary/2023/2023-11-1-friends/","section":"","summary":"人生列车缓慢地行驶在阳光明媚的午后旷野。若有人向我招手，我便邀请他们坐上一段，听他们分享关于面包，远方和在夜晚流浪的一切，最后微笑着告别。","title":"午后旷野"},{"content":"","date":"6 November 2023","permalink":"/tags/%E6%97%A5%E8%AE%B0/","section":"Tags","summary":"","title":"日记"},{"content":"","date":"6 November 2023","permalink":"/categories/%E7%8E%B2%E7%8F%91%E9%9B%95%E5%BF%83/","section":"Categories","summary":"","title":"玲珑雕心"},{"content":"","date":"6 November 2023","permalink":"/tags/elastic-search/","section":"Tags","summary":"","title":"Elastic Search"},{"content":"","date":"6 November 2023","permalink":"/tags/elk/","section":"Tags","summary":"","title":"ELK"},{"content":"","date":"6 November 2023","permalink":"/series/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/","section":"Series","summary":"","title":"前端性能监控"},{"content":" 官方文档 # elastic organization github homepage APM Agents Legacy APM Server Elasticsearch Kibana APM Real User Monitoring JavaScript Agent(Angular integration) Run APM Server on Docker 传统的安装部分可以跳过，因为现在一般都是安装在docker上，我们可以直接使用官方或者第三方已经写好的dockerfile等文件替代传统的安装方式。\nQ: What is APM? # A: Free and open application performance monitoring\nElastic APM is an application performance monitoring system built on the Elastic Stack. It allows you to monitor software services and applications in real-time, by collecting detailed performance information on response time for incoming requests, database queries, calls to caches, external HTTP requests, and more. This makes it easy to pinpoint and fix performance problems quickly. Elastic APM also automatically collects unhandled errors and exceptions. Errors are grouped based primarily on the stack trace, so you can identify new errors as they appear and keep an eye on how many times specific errors happen. Metrics are another vital source of information when debugging production systems. Elastic APM agents automatically pick up basic host-level metrics and agent-specific metrics, like JVM metrics in the Java Agent, and Go runtime metrics in the Go Agent.\nAPM Server # APM Server是elastic家推出的前端性能监控方案的组成部分。它接收从Elastic APM agents发送来的信息并转发到Elasticsearch documents中存储，最后在Kibana中进行性能指标的可视化。\n","date":"6 November 2023","permalink":"/posts/2023/frontend_performance_monotor/","section":"","summary":"官方文档 # elastic organization github homepage APM Agents Legacy APM Server Elasticsearch Kibana APM Real User Monitoring JavaScript Agent(Angular integration) Run APM Server on Docker 传统的安装部分可以跳过，因为现在一般都是安装在docker上，我们可以直接使用官方或者第三方已经写好的dockerfile等文件替代传统的安装方式。","title":"前端性能监控工具之APM Server"},{"content":"","date":"6 November 2023","permalink":"/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/","section":"Tags","summary":"","title":"性能监控"},{"content":"","date":"6 November 2023","permalink":"/tags/npm/","section":"Tags","summary":"","title":"npm"},{"content":" 参考文档 # 什么是 npm —— 写给初学者的编程教程 npm docs npm 和 npx 的区别是什么 package.json 详解 package.json 自定义字段 npx 使用教程 npm scripts 使用指南 npm # npm是node.js中的包管理器，npm 使 JavaScript 开发人员可以快速方便地共享软件包。\nnpm 由两个主要部分组成:\n用于发布和下载程序包的 CLI（命令行界面）工具 托管 JavaScript 程序包的在线存储库 npm 本身并不运行任何软件包。如果你想使用 npm 运行一个包，你必须在 package.json 文件中指定这个包。\n当可执行文件通过 npm 包安装时，npm 会创建链接指向它们。这些包不是安装为全局可执行文件，而是安装在：\n本地安装的链接是在 ./node_modules/.bin/ 目录下创建的 全局安装会在全局 bin/ 目录下创建链接（例如：Linux 上的 /usr/local/bin 或 Windows 上的 %AppData%/npm） 要用 npm 执行一个包，你必须输入本地路径,比如要执行刚npm install prettier安装的prettier来美化代码，你需要：\n./node_modules/.bin/prettier 。 --check 或者通过在脚本部分的 package.json 文件中添加一个本地安装的软件包来运行它:\n{ \u0026#34;name\u0026#34;: \u0026#34;your-application\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;prettier-code\u0026#34;: \u0026#34;prettier . --write\u0026#34; } } 然后用npm run prettier-code来运行这个脚本。\nnpx # 主要功能 # npx 想要解决的主要问题，就是调用项目内部安装的模块。\n还是以上文的prettier为例，\n./node_modules/.bin/prettier . --check 现在只需要写成\nnpx prettier . --check npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。 由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。\nnpx ls 就等于 ls。\n执行未安装的软件包 # 如果只想使用一次某些软件包（不管是出于测试还是什么目的），那么你没有必要本地全局安装。npx可以实现把该软件包下载到一个临时的目录，执行完成就删除软件包，降低磁盘占用。\nnpx的这一功能 使测试一个 Node.js 包或模块的不同版本变得非常容易。（不过我暂时没有什么使用场景）\npackage.json # 每个 JavaScript 项目（无论是 Node.js 还是浏览器应用程序）都可以被当作 npm 软件包，并且通过 package.json 来描述项目和软件包信息。当运行 npm init 初始化 JavaScript/Node.js 项目时，将生成 package.json 文件。\n项目的 package.json 是配置和描述如何与程序交互和运行的中心。 npm CLI（和 yarn）用它来识别你的项目并了解如何处理项目的依赖关系。package.json 文件使 npm 可以启动你的项目、运行脚本、安装依赖项、发布到 NPM 注册表以及许多其他有用的任务。 npm CLI 也是管理 package.json 的最佳方法，因为它有助于在项目的整个生命周期内生成和更新 package.json 文件。\npackage.json里有很多字段，如果需要的时候最好的办法还是查阅官方文档： Specifics of npm\u0026rsquo;s package.json handling。\n我这里记录一下几个我觉得很常用的部分。\nmain # { \u0026#34;main\u0026#34;: \u0026#34;src/index.js\u0026#34;, } The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require(\u0026ldquo;foo\u0026rdquo;), then your main module\u0026rsquo;s exports object will be returned. This should be a module relative to the root of your package folder.\n也就是说，main字段定义了项目的入口点，当导入此包的时候，main指定的入口文件中的module.exports中的内容会被返回。\nscripts # The \u0026ldquo;scripts\u0026rdquo; property of your package.json file supports a number of built-in scripts and their preset life cycle events as well as arbitrary scripts. These all can be executed by running npm run-script \u0026lt;stage\u0026gt; or npm run \u0026lt;stage\u0026gt; for short.\nnpm默认提供了一些脚本和生命周期钩子，不过我们完全可以修改以及创建自定义的脚本。\nnpm脚本实际上就是shell脚本，每当执行npm run，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。\nLife Cycle Scripts # npm 脚本有pre和post两个钩子。举例来说，build脚本命令的钩子就是prebuild和postbuild。\n{ \u0026#34;scripts\u0026#34;:{ \u0026#34;prebuild\u0026#34;: \u0026#34;echo I run before the build script\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;cross-env NODE_ENV=production webpack\u0026#34;, \u0026#34;postbuild\u0026#34;: \u0026#34;echo I run after the build script\u0026#34; } } 用户执行npm run build的时候，会自动按照下面的顺序执行。\nnpm run prebuild \u0026amp;\u0026amp; npm run build \u0026amp;\u0026amp; npm run postbuild\n创建自定义脚本 # { \u0026#34;scripts\u0026#34;:{ \u0026#34;prepare\u0026#34;: \u0026#34;husky install\u0026#34; } } dependencies # 这是 package.json 中最重要的字段之一，它列出了项目使用的所有依赖项（项目所依赖的外部代码）。\ndevDependencies # 与 dependencies 字段类似，但是这里列出的包仅在开发期间需要，而在生产中不需要。再生产环境中可以通过npm install --production来减少安装包体积。\npeerDependencies, overrides\u0026hellip; # 还有很多字段，也是非常实用的。但这部分一般遇不到，你只需要遇到的时候知道怎么搜索对应的关键字即可。\n自定义字段 # 在 package.json 文件中，还可以自定义字段（这些字段不会影响到 npm 对包的处理，主要是用来存储信息，特定的软件包可以读取）。\n要自定义字段，只需要在 package.json 文件中添加新的键值对即可。\n{ \u0026#34;name\u0026#34;: \u0026#34;angular-love-pdf\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;lint-staged\u0026#34;: { \u0026#34;**/*\u0026#34;: \u0026#34;prettier --write --ignore-unknown\u0026#34; }, } 总结 # 我觉得想学习JavaScript的工程化应用，首先必须学会使用npm和packages.json。通过这篇文章，我也加深了自己对这些概念的理解。\n","date":"6 November 2023","permalink":"/posts/2023/npx_vs_npm/","section":"","summary":"参考文档 # 什么是 npm —— 写给初学者的编程教程 npm docs npm 和 npx 的区别是什么 package.","title":"npm，npx和packages.json"},{"content":"","date":"6 November 2023","permalink":"/tags/npx/","section":"Tags","summary":"","title":"npx"},{"content":" 前言 # 如果你逛Github的话，就会发现很多项目根目录除了.github还有个.husky文件夹，我一直好奇这个文件夹的作用。今天正好创建了一个新项目，借此机会一探究竟。\n项目地址 # husky prettier lint-staged eslint commitlint 了解Git Hooks # Git Hooks 是在 Git 执行特定事件（如commit、push、receive等）时触发运行的脚本（也就是Shell，Python等语言都可以），类似于“钩子函数”。跟钩子函数一样，Git Hooks可以起到一个承上启下的作用。\nGit Hooks是Git提供的特性。钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。钩子又可以分类为客户端钩子和服务器端钩子。客户端钩子分为很多种。 下面把它们分为：提交工作流钩子、电子邮件工作流钩子和其它钩子。如果想了解更多关于Git Hooks的细节，请参考 Git官方文档（Git 钩子）\nGit Hooks存在的问题 # 由于Git Hooks默认是存在.git目录下的，无法进行版本控制。好在Git新版本中core.hooksPath的出现可以使Hooks存放的路径指向自定义的目录。\nhusky # 为什么需要在git hooks上再多husky这个上层建筑呢？简而言之，它能够简化创建和修改Githooks的操作。\n安装husky # 根据 husky官方文档，\nnpx husky-init \u0026amp;\u0026amp; npm install 它会：\n添加prepare脚本到package.json 创建一个模板pre-commit钩子 配置Git hooks路径到.husky 自定义钩子 # 以下命令会创建一个pre-commitgit hook，也就是在每次commit之前都会执行npm test,如果执行失败呢，就不会commit成功。\nnpx husky add .husky/pre-commit \u0026#34;npm test\u0026#34; （如果不清楚npm和npx的区别，请参考我的另一篇文章： npm 和 npx 是什么）\nprettier # Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\n简而言之，Prettier 是一个代码美化工具。支持JavaScript · TypeScript · Flow · JSX · JSON · CSS · SCSS · Less · HTML · Vue · Angular · GraphQL · Markdown · YAML等语言。\n安装prettier # 同样，参考自 官方文档。\nnpm install --save-dev --save-exact prettier 然后执行下列命令会在根目录新建一个空的prettier配置文件。\nnode --eval \u0026#34;fs.writeFileSync(\u0026#39;.prettierrc\u0026#39;,\u0026#39;{}\\n\u0026#39;)\u0026#34; CLI使用 # 主要有两个操作：\ncheck（检查文件是否符合代码风格，但不执行格式化） write（格式化文件） check # 这里的.是指当前目录，可以自己指定想要格式化的目录。\nnpx prettier . --check write # 这里的.是指当前目录，可以自己指定想要格式化的目录。\nnpx prettier . --write 与编辑器集成 # 除了执行命令格式化之外，更常用的是在编辑器中执行操作，比如保存文件时触发格式化。本文主要记录与Husky的联动，不打算深究这部分，具体参考 Editor Integration。\neslint-config-prettier # 注意⚠️：如果项目中同时使用了eslint和prettier，那么还需要 eslint-config-prettier，来避免eslint和prettier配置的冲突。它会关闭所有非必要或者会导致与prettier冲突的ESLint规则。\nPrettier vs. Linters # Linters have two categories of rules:\nFormatting rules: eg: max-len, no-mixed-spaces-and-tabs, keyword-spacing, comma-style…\nPrettier alleviates the need for this whole category of rules! Prettier is going to reprint the entire program from scratch in a consistent way, so it’s not possible for the programmer to make a mistake there anymore :)\nCode-quality rules: eg no-unused-vars, no-extra-bind, no-implicit-globals, prefer-promise-reject-errors…\nPrettier does nothing to help with those kind of rules. They are also the most important ones provided by linters as they are likely to catch real bugs with your code!\nIn other words, use Prettier for formatting and linters for catching bugs!\n总儿颜值就是，使用Prettier来格式化代码，linters来抑制bug。\nlinters的一个代表就是eslint：eslint是一个按照规则执行代码检查的工具，它可以在编码阶段进行静态分析，给出检查报告。搭配一些插件，可以提前暴露问题，给出提示，并进行修复，大大减少执行过程中的bug。\nlint-staged # lint-staged是一个在**git暂存文件(staged)**上运行linters的工具。 官方的原文是：\nRun linters against staged git files and don\u0026rsquo;t let 💩 slip into your code base!\n它的好处是：\nBut running a lint process on a whole project is slow, and linting results can be irrelevant. Ultimately you only want to lint files that will be committed.\n安装 lint-staged # npm install --save-dev lint-staged 使用需要搭配husky和Prettier等工具，直接看 最佳实践部分。\ncommitlint # 从上文就可以得知，lint是一类按照规则执行检查的工具，commitlint就是一个git commit校验约束工具。它要求我们的提交记录符合 conventional-commits规范。\n安装 # npm install --save-dev @commitlint/{config-conventional,cli} echo \u0026#34;module.exports = {extends: [\u0026#39;@commitlint/config-conventional\u0026#39;]}\u0026#34; \u0026gt; commitlint.config.js 然后在配置文件中配置详细的规则。\n规则 # 详细规则参考： 官方文档。\nangular的案例 # 不同的编程语言还贴心地给出了不同的提交规范，一般我只需要吧extends的类型修改一下即可。\nnpm install --save-dev @commitlint/config-angular @commitlint/cli echo \u0026#34;module.exports = {extends: [\u0026#39;@commitlint/config-angular\u0026#39;]};\u0026#34; \u0026gt; commitlint.config.js 与husky的结合 # 要在提交之前生效，需要添加如下钩子：\nnpx husky add .husky/commit-msg \u0026#39;npx --no -- commitlint --edit ${1}\u0026#39; 最佳实践 # 参考自： Prettier #Git hooks\n# prettier npm install --save-dev --save-exact prettier node --eval \u0026#34;fs.writeFileSync(\u0026#39;.prettierrc\u0026#39;,\u0026#39;{}\\n\u0026#39;)\u0026#34; # husky \u0026amp; lint-staged npm install --save-dev husky lint-staged npx husky install npm pkg set scripts.prepare=\u0026#34;husky install\u0026#34; npx husky add .husky/pre-commit \u0026#34;npx lint-staged\u0026#34; # commitlint npm install --save-dev @commitlint/{config-conventional,cli} echo \u0026#34;module.exports = {extends: [\u0026#39;@commitlint/config-conventional\u0026#39;]}\u0026#34; \u0026gt; commitlint.config.js npx husky add .husky/commit-msg \u0026#39;npx --no -- commitlint --edit ${1}\u0026#39; 然后在package.json中加入：\n{ \u0026#34;scripts\u0026#34;: { ... }, \u0026#34;lint-staged\u0026#34;: { \u0026#34;**/*\u0026#34;: \u0026#34;prettier --write --ignore-unknown\u0026#34; } } 这样就会在每次提交代码之前对所有支持的文件类型执行格式化操作。\n限制lint-staged的范围 # { \u0026#34;scripts\u0026#34;: { ... }, \u0026#34;lint-staged\u0026#34;: { \u0026#34;src/**/!(*.min).js\u0026#34;: [ \u0026#34;prettier --check\u0026#34;, ], \u0026#34;src/**/*.{ts,vue}\u0026#34;: [ \u0026#34;prettier --write\u0026#34;, ], \u0026#34;src/**/*.{ts,js,vue,html,css,scss,sass,stylus}\u0026#34;: [ \u0026#34;prettier --write\u0026#34; ] }, } 这样就会对不同的文件夹下面的不同文件类型的文件执行不同的脚本。\n","date":"5 November 2023","permalink":"/posts/2023/frontend-tool/","section":"","summary":"前言 # 如果你逛Github的话，就会发现很多项目根目录除了.","title":"Commit Better Code with Husky, Prettier, commitlint and Lint-Staged"},{"content":"","date":"5 November 2023","permalink":"/tags/%E4%BB%A3%E7%A0%81%E7%BE%8E%E5%8C%96/","section":"Tags","summary":"","title":"代码美化"},{"content":"","date":"19 October 2023","permalink":"/tags/github/","section":"Tags","summary":"","title":"Github"},{"content":"","date":"19 October 2023","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"仅仅是在Github Pages部署博客就有好几种方式，分别为：\n本地打包 Github Actions打包 以及\n部署到同一仓库 部署到不同仓库 这里我主要记录一下我用的本地打包并部署到同一仓库的方法。\n本地打包 + 部署到同一仓库 # 为什么要本地打包 # 说来话长，我使用的Hugo主题使用Github Actions打包总是会报错，但是本地打包又没有问题，网络上也没有搜到报错的解决方案。尝试几天解决无果后，遂退而求其次选择本地打包。\n打包和部署 # 首先在config.toml中把添加如下一行把build的分支从/public改到/docs。\npublishDir = \u0026#34;docs\u0026#34; 然后在项目根目录打开终端输入\nhugo 完成打包。打包完成后可以看到多了一个/docs文件夹（注意不要把这个文件夹加入.gitignore中）。接下来需要同时把打包后的结果push到远程分支（Github分支任意命名即可，不用遵守xxx.github.io的规则）。\n推送完成后进入Github对应分支的设置界面，点击Pages界面，把第三点设置为图上对应格式。如果有域名的话，在第四点那个填上对应域名。（域名这块我也是看的别人的博客，感兴趣的话网上很多教程）\n如果前面的设置都没有问题的话，接下来在Github的导航栏上点击Action，就能看到All workflows列表下有一个正在运行的workflows, 这是Github Actions自带的pages build and deployment workflow，也是为什么你把静态网页推动到Github仓库后就能访问到个人网站的原因。Github Actions提供了一个完整的CI/CD流程，如果对Github Actions想有更深入的了解的话，可以去参考官网文档。但对于只想搭建个人博客的同学来说，这已经足够应对了。\n访问 # 如果你之前没有填写自定义域名，那么你的博客地址是：\u0026lt;github user name\u0026gt;.github.io/\u0026lt;repository name\u0026gt;。比如如果你的Github用户名是abc,你这个仓库的名字是blog，那么你的访问地址就是：abc.github.io/blog。\n如果你之前填写了自定义域名，那么访问地址就是自定义域名。\nGithub Actions打包 + 部署到同一仓库 # Github Actions打包 # 这个方法主要区别是要写一个配置文件，但幸运的是，早已经有人写好了，我们直接复制别人写好的配置即可。配置在仓库目录 .github/workflows 下，以 .yml 为后缀即可，比如.github/workflows/blog-deploy.yml。\nname: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: pseudoyu/pseudoyu.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 上面的配置文件还设置了定时任务，如果不要可以删除这段：\nworkflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; 如果想了解细节，参考：\nhttps://github.com/actions/checkout https://github.com/peaceiris/actions-hugo https://github.com/peaceiris/actions-gh-pages 部署 # 部署和上面的类似，只是分支从main变成了gh-pages分支，所以设置那里上图第三点需要把分支设置为gh-pages分支，目录设置为根目录。这样每次本地更新完内容后就直接推送到远程分支，等待Github Action完成打包和部署即可。\n","date":"19 October 2023","permalink":"/posts/2023/blog_deploy/","section":"","summary":"仅仅是在Github Pages部署博客就有好几种方式，分别为：","title":"Hugo博客部署"},{"content":"","date":"19 October 2023","permalink":"/tags/%E5%8D%9A%E5%AE%A2/","section":"Tags","summary":"","title":"博客"},{"content":"","date":"19 October 2023","permalink":"/series/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E5%8F%91%E5%B8%83%E5%85%A8%E6%B5%81%E7%A8%8B/","section":"Series","summary":"","title":"博客搭建到发布全流程"},{"content":"","date":"19 October 2023","permalink":"/categories/%E6%8A%98%E8%85%BE/","section":"Categories","summary":"","title":"折腾"},{"content":"","date":"19 October 2023","permalink":"/tags/%E9%83%A8%E7%BD%B2/","section":"Tags","summary":"","title":"部署"},{"content":"","date":"17 October 2023","permalink":"/","section":"你好，世界","summary":"","title":"你好，世界"},{"content":" 前言 # 还记得第一次搭建博客是在大二，当时一个人带着电脑到教室学习算法，但是遇到苦难习惯性地开始不务正业，去折腾一些更简单的东西来寻求心理安慰。兜兜转转几年过去了，前前后后折腾了不少东西，但是技术也没有精进多少。现在想来，没有去挑战困难是大学最后悔的一件事。另外一件遗憾的事是很少记录生活，一些当初很感动的事情，现在也越来越模糊了。\n这也是我这次重新搭建博客的初衷，记录下自己的脚步，希望未来读档的时候不至于指针越界。\n静态博客主流方案 # 工具 Jekyll Hexo ｜ Hugo 介绍 Jekyll 是一个静态网站生成器，基于Ruby语言。 快速、简洁且高效的博客框架。 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 优点 GitHub 支持好，历史最长，文档完备。 国人开发，入门简单。 基于Golang，生成速度快，社区活跃。 缺点 基于Ruby，在三种生成器中速度最慢。需要一定Ruby基础。 基于Node.js，生成速度一般。 入门简单，深入需要阅读英文文档。 曾经在V2EX看到过一个帖子说：\n一个是一群搞前端的人做的，一个是一群搞后端的人做的，特色都十分鲜明。\n深度体验下来，我觉得说的很有道理。\nHugo 安装 # Hugo官方文档地址： Quick start。安装照着教程来就可以了。\n如果使用Homebrew安装只需要：\nbrew install hugo 即可完成。\n安装完成后输入:\nhugo version 来确认是否安装完成。\n新建Hugo网站 # hugo new site site_name cd site_name git init 然后选择使用git submodule的方式来安装主题（还可以用go module的方式，不过我更喜欢git submodule）。\n设置主题 # 接下来去 Hugo主题网站挑选自己喜欢的主题。个人比较喜欢简洁现代风一点的：\nblowfish mini doIt 这里我选择的是 blowfish。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来就是主题相关的配置了，你可以像我一样在终端的博客根目录输入code .进入VS Code进行配置。需要参考 blowfish官方文档(英文文档，需要适应一下)。\n根据文档内容，首先把现在根目录的config.toml文件删除，然后拷贝themes/blowfish/config/_default/目录下的所有toml后缀的文件到博客根目录下的config/_default/目录中。\n然后你就能启动项目看见主题的效果了：\nhugo server 通过 http://localhost:1313 访问。\n添加文章 # 首先先不考虑目录结构和文章分类等问题，跟着敲一遍下列命令新建第一篇文章：\nhugo new content posts/my-first-post.md Hugo会在content/posts目录下新建my-first-post.md文件，你可以随便写入些内容，符合markdown格式即可。比如:\n+++ title = \u0026#39;需要写点什么东西\u0026#39; date = 2023-10-14T11:56:21+08:00 draft = true +++ 不仅需要输入，更需要输出。做一个生产者。 然后在终端输入:\n# -D 意味着生成的内容包括草稿,如上所示，元数据里我加了一行draft = true，表明这个文件是一个草稿，如果不加-D参数的话不会被生成。 hugo server -D 命令重新生成并启动自带的服务器。通过 http://localhost:1313 访问查看效果。\n打包 # 命令很简单：\nhugo 打包的资源放在/public目录下。\n接下来 # 好了，这就是Hugo搭建博客的主要过程，但是如果要想写的得心应手，其实还需要阅读一下Hugo关于内容管理和模板等部分的文档。\n如果想要发布到网络上，还需要自己购买服务器，申请备案等等。不过GitHub Pages给我们提供了另一种选择，你可以不需要服务器，不需要购买域名，甚至不需要多少额外的配置就可以把博客发布到互联网上。\n欢迎阅读这个系列的下一章节。\n","date":"14 October 2023","permalink":"/posts/2023/hugo_blog_build_up/","section":"","summary":"前言 # 还记得第一次搭建博客是在大二，当时一个人带着电脑到教室学习算法，但是遇到苦难习惯性地开始不务正业，去折腾一些更简单的东西来寻求心理安慰。兜兜转转几年过去了，前前后后折腾了不少东西，但是技术也没有精进多少。现在想来，没有去挑战困难是大学最后悔的一件事。另外一件遗憾的事是很少记录生活，一些当初很感动的事情，现在也越来越模糊了。","title":"Hugo博客搭建"},{"content":"羡慕那些能表达出文字的力量的人，寥寥数语，就能让我感受到内心的宁静，或者唤醒沉睡的另一个自己。\n","date":"14 October 2023","permalink":"/diary/2023/2023-10-14-first-diary/","section":"","summary":"羡慕那些能表达出文字的力量的人，寥寥数语，就能让我感受到内心的宁静，或者唤醒沉睡的另一个自己。","title":"需要写点什么东西的冲动"},{"content":" Hi there,\nMy name is Terry, 22 years old. Here is my personal blog site where I will record my daily life and programming experience.\nHopefully, we can all find something from here.\nBest wishes,\nTerry\n","date":"7 October 2023","permalink":"/about/","section":"你好，世界","summary":"Hi there,","title":"About"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"}]