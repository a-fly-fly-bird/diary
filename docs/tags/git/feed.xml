<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 浮生日记</title>
    <link>https://shadow-diary.fun/tags/git/</link>
    <description>Recent content in Git on 浮生日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copy, _right?_ :thinking_face:</copyright>
    <lastBuildDate>Fri, 15 Dec 2023 22:49:08 +0800</lastBuildDate><atom:link href="https://shadow-diary.fun/tags/git/feed.xml" rel="self" type="application/rss+xml" />
    <item>
<title>Git Handbook</title>
<link>https://shadow-diary.fun/posts/2023/git-handbook/</link>
<pubDate>Fri, 15 Dec 2023 22:49:08 +0800</pubDate>
      
      <guid>https://shadow-diary.fun/posts/2023/git-handbook/</guid>
<description>&lt;h1 class=&#34;relative group&#34;&gt;起步 
    &lt;div id=&#34;起步&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%b5%b7%e6%ad%a5&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;关于版本控制 
    &lt;div id=&#34;关于版本控制&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%85%b3%e4%ba%8e%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;​	版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;分类 
    &lt;div id=&#34;分类&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%86%e7%b1%bb&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本地版本控制系统&lt;/li&gt;
&lt;li&gt;集中化的版本控制系统&lt;/li&gt;
&lt;li&gt;分布式版本控制系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;relative group&#34;&gt;Git历史 
    &lt;div id=&#34;git历史&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e5%8e%86%e5%8f%b2&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;​	Git由Linux的创造者Lunus创造。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;Git是什么 
    &lt;div id=&#34;git是什么&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e6%98%af%e4%bb%80%e4%b9%88&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接记录快照，而非差异比较&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	其他很多版本控制系统都是记录两个版本的差异，而在 Git 中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git 更像是一个小型的文件系统。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;近乎所有操作都是本地执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git保证完整性&lt;/p&gt;
&lt;p&gt;Git中的所有数据在存储前都会计算哈希值（校验和），并且以校验和来引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git 一般只添加数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&#34;relative group&#34;&gt;三种状态 
    &lt;div id=&#34;三种状态&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%b8%89%e7%a7%8d%e7%8a%b6%e6%80%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;已修改（modified）&lt;/li&gt;
&lt;li&gt;已暂存（staged）&lt;/li&gt;
&lt;li&gt;已提交（committed）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&#34;relative group&#34;&gt;安装Git 
    &lt;div id=&#34;安装git&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%ae%89%e8%a3%85git&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;MacOS：&lt;code&gt;brew install git &lt;/code&gt;.&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;配置 
    &lt;div id=&#34;配置&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%85%8d%e7%bd%ae&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;Git有三个等级的配置文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;system&lt;/li&gt;
&lt;li&gt;user&lt;/li&gt;
&lt;li&gt;local&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优先级从上到下依次提高。&lt;/p&gt;
&lt;p&gt;第一次使用Git前需要先配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;terry&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;abc@qq.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 class=&#34;relative group&#34;&gt;Git基础 
    &lt;div id=&#34;git基础&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e5%9f%ba%e7%a1%80&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;已追踪和未追踪 
    &lt;div id=&#34;已追踪和未追踪&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%b7%b2%e8%bf%bd%e8%b8%aa%e5%92%8c%e6%9c%aa%e8%bf%bd%e8%b8%aa&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;工作目录下的文件状态：已跟踪 或 未跟踪。&lt;/p&gt;
&lt;p&gt;以跟踪的文件就是已经纳入Git版本控制系统的文件，在上一次的快照中有它们的记录。&lt;/p&gt;
&lt;p&gt;除此之外，就是未跟踪的文件。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;忽略文件 
    &lt;div id=&#34;忽略文件&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%bf%bd%e7%95%a5%e6%96%87%e4%bb%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。&lt;/p&gt;
&lt;p&gt;规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持&lt;strong&gt;标准的glob模式&lt;/strong&gt;，递归应用在整个工作区。（根据维基百科的介绍，在计算机编程中 glob 模式表示带有通配符的路径名，是简化了的正则表达式）&lt;/li&gt;
&lt;li&gt;匹配模式可以以（/）开头防止递归。&lt;/li&gt;
&lt;li&gt;匹配模式可以以（/）结尾指定目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多级目录可以有多个忽略文件，同样是越靠近源文件的优先级越高。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;删除文件 
    &lt;div id=&#34;删除文件&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%a0%e9%99%a4%e6%96%87%e4%bb%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rm xxx.file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述命令会从已跟踪清单中移除，并从工作目录中移除该文件。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;忘记添加&lt;code&gt;.gitignore&lt;/code&gt;文件 
    &lt;div id=&#34;忘记添加gitignore文件&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%bf%98%e8%ae%b0%e6%b7%bb%e5%8a%a0gitignore%e6%96%87%e4%bb%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git rm --cached xxx.file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该命令会将文件从已跟踪清单中移除，但是保留在工作目录。&lt;/p&gt;
&lt;p&gt;git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;移动文件 
    &lt;div id=&#34;移动文件&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%a7%bb%e5%8a%a8%e6%96%87%e4%bb%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Git能够推断出是改名而不是新文件。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;git mv file_from file_to**&lt;/code&gt;或者**&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mv file_from file_to
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rm file_from
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add file_to
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种方式Git都能意识到这是一次重命名。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;查看提交历史 
    &lt;div id=&#34;查看提交历史&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%9f%a5%e7%9c%8b%e6%8f%90%e4%ba%a4%e5%8e%86%e5%8f%b2&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;命令：&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;差异对比还是GUI工具好用，比如VS Code插件Git History。&lt;/p&gt;
&lt;p&gt;比较有用的命令：&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;查看文件的提交记录 
    &lt;div id=&#34;查看文件的提交记录&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%9f%a5%e7%9c%8b%e6%96%87%e4%bb%b6%e7%9a%84%e6%8f%90%e4%ba%a4%e8%ae%b0%e5%bd%95&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log -- filename_or_path
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;relative group&#34;&gt;撤销操作 
    &lt;div id=&#34;撤销操作&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%92%a4%e9%94%80%e6%93%8d%e4%bd%9c&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;实践下来，撤销有很多个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt;可以修改提交信息，如果暂存区有新的文件，也会同时提交。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“当你在修补最后的提交时，与其说是修复旧提交，倒不如说是完全用一个 新的提交 替换旧的提交，
理解这一点非常重要。”&lt;/p&gt;
&lt;p&gt;“修补提交最明显的价值是可以稍微改进你最后的提交，而不会让“啊，忘了添加一个文件”或者
“小修补，修正笔误”这种提交信息弄乱你的仓库历史。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&#34;relative group&#34;&gt;取消暂存文件 
    &lt;div id=&#34;取消暂存文件&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%8f%96%e6%b6%88%e6%9a%82%e5%ad%98%e6%96%87%e4%bb%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;如何把暂存区的文件重新放回工作区？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset HEAD filename&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;撤销对文件的修改 
    &lt;div id=&#34;撤销对文件的修改&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%92%a4%e9%94%80%e5%af%b9%e6%96%87%e4%bb%b6%e7%9a%84%e4%bf%ae%e6%94%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git checkout -- file&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;远程仓库的使用 
    &lt;div id=&#34;远程仓库的使用&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e7%9a%84%e4%bd%bf%e7%94%a8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。&lt;/p&gt;
&lt;p&gt;查看远程仓库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;添加远程仓库 
    &lt;div id=&#34;添加远程仓库&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git remote add name url&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;从远程仓库中抓取和拉取 
    &lt;div id=&#34;从远程仓库中抓取和拉取&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%bb%8e%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e4%b8%ad%e6%8a%93%e5%8f%96%e5%92%8c%e6%8b%89%e5%8f%96&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git fetch &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个命令会访问远程仓库，从中拉取所有你还没有的数据。&lt;/p&gt;
&lt;p&gt;必须注意 git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。当准备好时你必须手动将其合并入你的工作。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;重命名远程分支 
    &lt;div id=&#34;重命名远程分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%87%8d%e5%91%bd%e5%90%8d%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git remote rename from to&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;打标签 
    &lt;div id=&#34;打标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%89%93%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Git可以把历史中的某一提交打上标签，表示很重要。其实也相当于索引。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;列出标签 
    &lt;div id=&#34;列出标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%97%e5%87%ba%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。&lt;/p&gt;
&lt;p&gt;轻量标签只是特定提交的引用，而附注标签相当于一个新的提交，有自己完整的信息，可以被校验。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;附注标签 
    &lt;div id=&#34;附注标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%99%84%e6%b3%a8%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git tag -a tag_name -m &amp;quot;info&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git show&lt;/code&gt;命令可以查看标签和对应的提交信息。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;轻量标签 
    &lt;div id=&#34;轻量标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%bd%bb%e9%87%8f%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git tag tag_name&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;后期打标签 
    &lt;div id=&#34;后期打标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%8e%e6%9c%9f%e6%89%93%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git tag -a tag_name commit_id&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;共享标签 
    &lt;div id=&#34;共享标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%85%b1%e4%ba%ab%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;默认情况下，git push 命令并不会传送标签到远程仓库服务器上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push origin tag_name&lt;/code&gt; or &lt;code&gt;git push origin --tags&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;删除标签 
    &lt;div id=&#34;删除标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%a0%e9%99%a4%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git tag -d tag_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要删除远程标签:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push origin --delete tag_name&lt;/code&gt;&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;检出到标签 
    &lt;div id=&#34;检出到标签&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%a3%80%e5%87%ba%e5%88%b0%e6%a0%87%e7%ad%be&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git checkout tag_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;检出会导致分离头指针（detached HEAD），不要在检出的分支上新增修改。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Git分支 
    &lt;div id=&#34;git分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;Git鼓励在工作流程中频繁地使用分支与合并。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;分支简介 
    &lt;div id=&#34;分支简介&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%86%e6%94%af%e7%ae%80%e4%bb%8b&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;在提交时，Git会保存一个提交对象。提交对象包含一个指向内容快照的指针，以及作者的姓名、邮箱、输入信息以及父对象指针。&lt;/p&gt;
&lt;p&gt;暂存操作会为每一个文件计算校验和，然后把文件快照保存到Git仓库中。&lt;/p&gt;
&lt;p&gt;提交时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，
然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象，
它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。&lt;/p&gt;
&lt;p&gt;现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树 对象
（记录着目录结构和 blob 对象索引）以及一个 提交 对象（包含着指向前述树对象的指针和所有提交信息）。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;首次提交的结构 
    &lt;div id=&#34;首次提交的结构&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%a6%96%e6%ac%a1%e6%8f%90%e4%ba%a4%e7%9a%84%e7%bb%93%e6%9e%84&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;




  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2013.14.54.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;后续结构 
    &lt;div id=&#34;后续结构&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%8e%e7%bb%ad%e7%bb%93%e6%9e%84&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;




  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2013.22.31.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;Snapshot 就是树对象。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;分支创建 
    &lt;div id=&#34;分支创建&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%86%e6%94%af%e5%88%9b%e5%bb%ba&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这会基于HEAD指向的提交对象创建一个新的指针。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;分支切换 
    &lt;div id=&#34;分支切换&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%86%e6%94%af%e5%88%87%e6%8d%a2&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git switch branch_name&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;检出分支 
    &lt;div id=&#34;检出分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%a3%80%e5%87%ba%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git checkout branch_name/commit_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用是将&lt;code&gt;HEAD&lt;/code&gt;指向对应的分支或者提交记录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;输出的星号（*）就代表目前检出的分支（HEAD指针所指向的分支）。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;暂存更改 
    &lt;div id=&#34;暂存更改&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%9a%82%e5%ad%98%e6%9b%b4%e6%94%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;取出更改: &lt;code&gt;git stash pop&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;合并分支 
    &lt;div id=&#34;合并分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%88%e5%b9%b6%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git merge branch_from&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个命令会把&lt;code&gt;branch_from&lt;/code&gt;的更改合并到当前分支。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;fast-forward 
    &lt;div id=&#34;fast-forward&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#fast-forward&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;新的提交如果是在当前的提交记录上的更改(当前HEAD指向的提交对象是新提交的直接祖先)，那么只需要将指针直接移动到新的提交对象上即可，因为只需要移动指针，所以形象地称为“快进”（fast-forward）。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;新建和删除分支的时机 
    &lt;div id=&#34;新建和删除分支的时机&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%96%b0%e5%bb%ba%e5%92%8c%e5%88%a0%e9%99%a4%e5%88%86%e6%94%af%e7%9a%84%e6%97%b6%e6%9c%ba&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;修bug会新建hotfix分支，如果bug改好了合并之后就可以删除hotfix分支了，保持分支的干净。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;合并提交 
    &lt;div id=&#34;合并提交&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%88%e5%b9%b6%e6%8f%90%e4%ba%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;




  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2013.57.04.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;这种情况，Git会将三方合并的结果做一个新的快照并创建新的提交对象指向它。&lt;/p&gt;
&lt;p&gt;




  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2013.58.37.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;冲突解决 
    &lt;div id=&#34;冲突解决&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%86%b2%e7%aa%81%e8%a7%a3%e5%86%b3&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。&lt;/p&gt;
&lt;p&gt;这个时候需要你先手动解决冲突然后再合并。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;可以查看因冲突而为合并的文件。&lt;/p&gt;
&lt;p&gt;解决冲突后需要&lt;code&gt;git commit&lt;/code&gt;来完成&lt;strong&gt;合并提交&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;分支开发工作流 
    &lt;div id=&#34;分支开发工作流&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%86%e6%94%af%e5%bc%80%e5%8f%91%e5%b7%a5%e4%bd%9c%e6%b5%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;随着你的提交而不断右移的指针。
稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;推送 
    &lt;div id=&#34;推送&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8e%a8%e9%80%81&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;




  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2014.12.08.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;p&gt;因为一个分支很可能有多人在协作开发，所以在推送前一般要先拉取远程分支的变更，合并到本地，然后再推送。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge origin/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来将远程分支的更改同步到本地分支上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;相当于&lt;code&gt;git fetch&lt;/code&gt;+&lt;code&gt;git merge&lt;/code&gt;命令。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;跟踪分支 
    &lt;div id=&#34;跟踪分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e8%b7%9f%e8%b8%aa%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。
跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&#34;relative group&#34;&gt;删除远程分支 
    &lt;div id=&#34;删除远程分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%88%a0%e9%99%a4%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git push origin --delete branch_name&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上这个命令做的只是从服务器上移除这个指针。Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&#34;relative group&#34;&gt;变基（Rebase） 
    &lt;div id=&#34;变基rebase&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%8f%98%e5%9f%barebase&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;变基的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）
的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，
然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。有点类似Git的&lt;code&gt;cherry-pick&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;变基的好处是让提交历史更加整洁，像穿行一样。（有点类似fast-forward和合并提交的区别）&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;更有趣的变基例子 
    &lt;div id=&#34;更有趣的变基例子&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%9b%b4%e6%9c%89%e8%b6%a3%e7%9a%84%e5%8f%98%e5%9f%ba%e4%be%8b%e5%ad%90&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase --onto master server client
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述命令可以从





  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2016.18.04.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  


变成





  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2016.18.18.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;变基的风险 
    &lt;div id=&#34;变基的风险&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%8f%98%e5%9f%ba%e7%9a%84%e9%a3%8e%e9%99%a9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;变基的本质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。&lt;/p&gt;
&lt;p&gt;问题在于如果你推送更改到了远程仓库，其他人基于这一提交记录进行了后续工作，如果你现在变基，也就是丢弃了这一记录，那么你就会&lt;strong&gt;影响到他人的工作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;具体案例请查看《Pro Git》一书的相关章节。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;用变基解决变基 
    &lt;div id=&#34;用变基解决变基&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%94%a8%e5%8f%98%e5%9f%ba%e8%a7%a3%e5%86%b3%e5%8f%98%e5%9f%ba&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;举个例子，如果遇到前面提到的有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）&lt;/li&gt;
&lt;li&gt;检查其中哪些提交不是合并操作的结果（C2，C3，C4）&lt;/li&gt;
&lt;li&gt;检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4&amp;rsquo;）&lt;/li&gt;
&lt;li&gt;把查到的这些提交应用在 teamone/master 上面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以从





  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2016.43.42.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  


变成





  
  
  
    &lt;figure&gt;
      &lt;img class=&#34;my-0 rounded-md&#34; src=&#34;_media/CleanShot%202024-02-15%20at%2016.44.00.png&#34; alt=&#34;alt text&#34; /&gt;
      
    &lt;/figure&gt;
  

&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;变基 vs. 合并 
    &lt;div id=&#34;变基-vs-合并&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%8f%98%e5%9f%ba-vs-%e5%90%88%e5%b9%b6&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;有一种观点认为，仓库的提交历史即是记录实际发生过什么。(合并更好)&lt;/p&gt;
&lt;p&gt;另一种观点则正好相反，他们认为提交历史是项目过程中发生的事。（变基更好）&lt;/p&gt;
&lt;p&gt;每个团队需求不同，可以制订符合实情的规范。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;向一个项目贡献 
    &lt;div id=&#34;向一个项目贡献&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%91%e4%b8%80%e4%b8%aa%e9%a1%b9%e7%9b%ae%e8%b4%a1%e7%8c%ae&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;影响因素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;活跃贡献者的数量&lt;/li&gt;
&lt;li&gt;项目使用的工作流程&lt;/li&gt;
&lt;li&gt;提交权限&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&#34;relative group&#34;&gt;提交准则 
    &lt;div id=&#34;提交准则&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8f%90%e4%ba%a4%e5%87%86%e5%88%99&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让每个提交成为一个逻辑上的独立变更集&lt;/li&gt;
&lt;li&gt;优质的提交信息（一般情况下，信息应当以少于 50 个字符（25个汉字）的单行开始且简要地描述变更，接着是一个空白行，再接着是一个更详细的解释。&lt;strong&gt;相当于标题和正文。&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 class=&#34;relative group&#34;&gt;维护项目 
    &lt;div id=&#34;维护项目&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%bb%b4%e6%8a%a4%e9%a1%b9%e7%9b%ae&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;准备一次发布 
    &lt;div id=&#34;准备一次发布&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%87%86%e5%a4%87%e4%b8%80%e6%ac%a1%e5%8f%91%e5%b8%83&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Git会包含很多快照，但有的时候我们不需要知道所有记录，只需要最新的快照，比如CI/CD部署等等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git archive master --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;project/&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gzip &amp;gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;git describe master&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.tar.g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者如果还想要git，那么&lt;code&gt;git clone --depth=1 url&lt;/code&gt;可以考虑一下。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Git 工具 
    &lt;div id=&#34;git-工具&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git-%e5%b7%a5%e5%85%b7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;选择修订版本 
    &lt;div id=&#34;选择修订版本&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%80%89%e6%8b%a9%e4%bf%ae%e8%ae%a2%e7%89%88%e6%9c%ac&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;commit_id 是一个40个字符的SHA-1散列值，但一般情况可以使用更简短的值就可以唯一确定一个commit_id。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;SHA-1 歧义 
    &lt;div id=&#34;sha-1-歧义&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#sha-1-%e6%ad%a7%e4%b9%89&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;如果仓库里出现了两个不同的对象具有相同的SHA-1值怎么办？&lt;/p&gt;
&lt;p&gt;如果你真的向仓库里提交了一个对象，它跟之前的某个 不同 对象的 SHA-1 值相同，
Git 会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。&lt;/p&gt;
&lt;p&gt;如果之后你想检出那个对象时，你将得到先前那个对象的数据。&lt;/p&gt;
&lt;p&gt;但这种概率很小。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;引用日志 
    &lt;div id=&#34;引用日志&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%bc%95%e7%94%a8%e6%97%a5%e5%bf%97&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Git 会在后台保存一个引用日志（reflog），引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;祖先引用 
    &lt;div id=&#34;祖先引用&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%a5%96%e5%85%88%e5%bc%95%e7%94%a8&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;会被解析为该引用的上一次提交&lt;/li&gt;
&lt;li&gt;^ 后面添加一个数字来指明想要 哪一个父提交——例如 d921970^2 代表 “d921970 的第二父提交”这个语法只适用于合并的提交，因为合并提交会有多个父提交。合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~n&lt;/code&gt;同样指向第一父提交，会被解析为第一父提交的第一父提交的xxx(n次)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用案例：
&lt;code&gt;HEAD~3^2&lt;/code&gt;表示当前所在提交记录的第一父提交的第一父提交的第一父提交的第二父提交。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;提交区间 
    &lt;div id=&#34;提交区间&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8f%90%e4%ba%a4%e5%8c%ba%e9%97%b4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;可以一次指定多个提交，十分有用的语法。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;双点 
    &lt;div id=&#34;双点&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%8f%8c%e7%82%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;最常用的指明提交区间语法是双点。这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git log master..terry
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示在&lt;code&gt;terry&lt;/code&gt;分支中但没有在&lt;code&gt;master&lt;/code&gt;分支的提交。如果留空了其中的一边，Git默认为HEAD。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log commit_id_1..commit_id_2&lt;/code&gt; 表示commit_id_1和commit_id_2之间的提交，不包括commit_id_1。 这也很实用。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;多点 
    &lt;div id=&#34;多点&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%a4%9a%e7%82%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;Git 允许你在任意引用前加上 ^ 字符或者 &amp;ndash;not 来指明你不希望提交被包含其中的分支。&lt;/p&gt;
&lt;p&gt;以下命令等价：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log refA..refB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log ^refA refB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log refB --not refA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以超过两个引用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log refA refB ^refC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log refA refB --not refC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&#34;relative group&#34;&gt;三点 
    &lt;div id=&#34;三点&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%b8%89%e7%82%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;三点语法可以选择出被两个引用之一包含但又不被两者同时包含的提交。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;stash 
    &lt;div id=&#34;stash&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#stash&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; and &lt;code&gt;git stash pop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;贮藏（stash）会处理工作目录的脏的状态——即跟踪文件的&lt;strong&gt;修改与暂存的改动（注意也就是说不包括未追踪的文件，比如新创建还没有暂存的）&lt;/strong&gt;——然后将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动（甚至在不同的分支上）。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;清除工作目录 
    &lt;div id=&#34;清除工作目录&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%b8%85%e9%99%a4%e5%b7%a5%e4%bd%9c%e7%9b%ae%e5%bd%95&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git clean&lt;/code&gt;会移除没有忽略的未跟踪文件。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;签署工作 
    &lt;div id=&#34;签署工作&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%ad%be%e7%bd%b2%e5%b7%a5%e4%bd%9c&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;Git的ShA-1可以保证每个提交对象是没有被篡改的，但是我们还需要保证这个提交是可信的（也就是作者而不是其他人提交的）。Git提供了GPG来签署和验证工作的方式。&lt;/p&gt;
&lt;p&gt;可以签署标签和提交。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;什么是GPG 
    &lt;div id=&#34;什么是gpg&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%98%afgpg&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/137801979&#34;   target=&#34;_blank&#34;&gt;
    简明 GPG 概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简而言之，SSH登陆密钥可以做身份验证，鉴权，而&amp;hellip;(看到了阮一峰老师的教程，有阮选阮。)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ruanyifeng.com/blog/2013/07/gpg.html&#34;   target=&#34;_blank&#34;&gt;
    阮一峰的网络日志 - GPG入门教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总而言之，GPG就是类似RSA等非堆成加密算法在现实中的应用，是一个工具，可以签名、加密等。类似的工具还有OpenSSL。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;Mac 安装 
    &lt;div id=&#34;mac-安装&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#mac-%e5%ae%89%e8%a3%85&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Mac的操作流程： &lt;a href=&#34;https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e&#34;   target=&#34;_blank&#34;&gt;
    Methods of Signing with a GPG Key on MacOS&lt;/a&gt;&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;重写历史 
    &lt;div id=&#34;重写历史&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e9%87%8d%e5%86%99%e5%8e%86%e5%8f%b2&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;修改最后一次提交信息 
    &lt;div id=&#34;修改最后一次提交信息&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%bf%ae%e6%94%b9%e6%9c%80%e5%90%8e%e4%b8%80%e6%ac%a1%e6%8f%90%e4%ba%a4%e4%bf%a1%e6%81%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;修改多个提交信息 
    &lt;div id=&#34;修改多个提交信息&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e4%bf%ae%e6%94%b9%e5%a4%9a%e4%b8%aa%e6%8f%90%e4%ba%a4%e4%bf%a1%e6%81%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git rebase -i HEAD~3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上就是利用变基的方式，把&lt;code&gt;HEAD&lt;/code&gt;的变基到&lt;code&gt;HEAD~3&lt;/code&gt;上（重写）。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;合并提交 
    &lt;div id=&#34;合并提交-1&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%88%e5%b9%b6%e6%8f%90%e4%ba%a4-1&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;也是借助&lt;code&gt;rebase&lt;/code&gt;完成，由此可见，&lt;code&gt;rebase&lt;/code&gt;是非常强大的工具。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;子模块 
    &lt;div id=&#34;子模块&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%ad%90%e6%a8%a1%e5%9d%97&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;Git 通过子模块来解决这个问题。
子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。&lt;/p&gt;
&lt;p&gt;这个使用的也很熟悉了，跳过。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Git属性 
    &lt;div id=&#34;git属性&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e5%b1%9e%e6%80%a7&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;你也可以针对特定的路径配置某些设置项，这样 Git 就只对特定的子目录或子文件集运用它们。&lt;/p&gt;
&lt;p&gt;这些基于路径的设置项被称为 Git 属性，可以在你的目录下的 .gitattributes 文件内
进行设置（通常是你的项目的根目录）。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;合并策略 
    &lt;div id=&#34;合并策略&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%90%88%e5%b9%b6%e7%ad%96%e7%95%a5&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;通过 Git 属性，你还能对项目中的特定文件指定不同的合并策略。
一个非常有用的选项就是，告诉 Git 当特定文件发生冲突时不要尝试合并它们，而是直接使用你这边的内容。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Git钩子 
    &lt;div id=&#34;git钩子&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e9%92%a9%e5%ad%90&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。
有两组这样的钩子：客户端的和服务器端的。
客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。&lt;/p&gt;
&lt;p&gt;我知道的一个实践案例就是：&lt;a href=&#34;https://github.com/typicode/husky&#34;   target=&#34;_blank&#34;&gt;
    husky&lt;/a&gt;&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Git 内部原理 
    &lt;div id=&#34;git-内部原理&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git-%e5%86%85%e9%83%a8%e5%8e%9f%e7%90%86&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;学习原理对于理解Git和更好地使用Git至关重要。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;Git对象 
    &lt;div id=&#34;git对象&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git%e5%af%b9%e8%b1%a1&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Git是一个内容寻址文件系统，也就是说，Git的核心是一个简单的键值对数据库。你可以向 &lt;strong&gt;Git 仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容。&lt;/strong&gt;(这句话非常重要，比如分支实际上是文件，存储在&lt;code&gt;.git/refs/heads&lt;/code&gt;里，文件里的内容就是提交对象的SHA-1散列值，可以直接用底层命令获取到对应的值，然后通过父提交，串起来。)&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;树对象 
    &lt;div id=&#34;树对象&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%a0%91%e5%af%b9%e8%b1%a1&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;与之前了解的基本一致。&lt;/p&gt;
&lt;p&gt;现在使用Git的频率变高了很多，使用场景也复杂了很多，根据需求总结一些常用的命令。虽然很多图形化工具已经非常还用了，但是命令行还是有类似&lt;code&gt;Write once, execute anywhere.&lt;/code&gt;的优势。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;常用命令 
    &lt;div id=&#34;常用命令&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;h2 class=&#34;relative group&#34;&gt;拉取分支 
    &lt;div id=&#34;拉取分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8b%89%e5%8f%96%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;h3 class=&#34;relative group&#34;&gt;基础命令 
    &lt;div id=&#34;基础命令&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e5%91%bd%e4%bb%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;repo-link&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;relative group&#34;&gt;拉取指定分支 
    &lt;div id=&#34;拉取指定分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8b%89%e5%8f%96%e6%8c%87%e5%ae%9a%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone -b &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;branch-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;repo-link&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;relative group&#34;&gt;拉取并重命名 
    &lt;div id=&#34;拉取并重命名&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%8b%89%e5%8f%96%e5%b9%b6%e9%87%8d%e5%91%bd%e5%90%8d&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;有的分支，我可能会拉取几次到本地，为了避免命名重复，就需要拉取的时候重命名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone -b &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;branch-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;repo-link&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;new-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;relative group&#34;&gt;撤销提交 
    &lt;div id=&#34;撤销提交&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%92%a4%e9%94%80%e6%8f%90%e4%ba%a4&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;分很多情况，比如是否已经提交，远程仓库是否对分支设置有限制策略等。适用命令有：&lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git revert&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 class=&#34;relative group&#34;&gt;已经提交PR并merge到不能直接操作的分支 
    &lt;div id=&#34;已经提交pr并merge到不能直接操作的分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%b7%b2%e7%bb%8f%e6%8f%90%e4%ba%a4pr%e5%b9%b6merge%e5%88%b0%e4%b8%8d%e8%83%bd%e7%9b%b4%e6%8e%a5%e6%93%8d%e4%bd%9c%e7%9a%84%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;对于Github来说，可以直接在页面上进行Undo操作，&lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/reverting-a-pull-request&#34;   target=&#34;_blank&#34;&gt;
    Reverting a pull request&lt;/a&gt;。所以下面的策略是针对没有这一特性的Bitbucket。
两种办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/37036587&#34;   target=&#34;_blank&#34;&gt;
    How to undo a merge on Bitbucket?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/38302342&#34;   target=&#34;_blank&#34;&gt;
    Revert a merged pull request on Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种使用限制很多而且非常危险，更推荐使用第二种，&lt;code&gt;revert&lt;/code&gt;。关于这几个支持回溯的命令的区别，参考&lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting&#34;   target=&#34;_blank&#34;&gt;
    atlassian docs: Resetting, checking out &amp;amp; reverting&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在提交pr的分支（the branch being merged into）或者从被merge的分支（the branch being merged from）新建一个fix分支，然后切到该分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git switch &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;branch-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git revert -m &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; of merged commit&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重新提交PR。&lt;/p&gt;
&lt;p&gt;使用这个命令也要很谨慎，最好不要走到这一步，因为根据&lt;a href=&#34;https://git-scm.com/docs/git-revert#Documentation/git-revert.txt--mparent-number&#34;   target=&#34;_blank&#34;&gt;
    git-revert - Revert some existing commits&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not ancestors of the previously reverted merge. This may or may not be what you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详情参考：&lt;a href=&#34;https://github.com/git/git/blob/master/Documentation/howto/revert-a-faulty-merge.txt&#34;   target=&#34;_blank&#34;&gt;
    revert-a-faulty-merge.txt&lt;/a&gt;&lt;/p&gt;
&lt;h4 class=&#34;relative group&#34;&gt;-m parent-number 配置项 
    &lt;div id=&#34;-m-parent-number-配置项&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#-m-parent-number-%e9%85%8d%e7%bd%ae%e9%a1%b9&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h4&gt;
&lt;p&gt;配置参考自：&lt;a href=&#34;https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html&#34;   target=&#34;_blank&#34;&gt;
    git cherry-pick 教程&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。&lt;/p&gt;
&lt;p&gt;-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。&lt;/p&gt;
&lt;p&gt;一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 class=&#34;relative group&#34;&gt;查看分支非最新的版本 
    &lt;div id=&#34;查看分支非最新的版本&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e6%9f%a5%e7%9c%8b%e5%88%86%e6%94%af%e9%9d%9e%e6%9c%80%e6%96%b0%e7%9a%84%e7%89%88%e6%9c%ac&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;注意，是仅查看，不要修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout &amp;lt;commit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;relative group&#34;&gt;回到上一个分支 
    &lt;div id=&#34;回到上一个分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e5%9b%9e%e5%88%b0%e4%b8%8a%e4%b8%80%e4%b8%aa%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;我们经常会切到其他分支，简单操作又切回dev分支。最简单的方法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git switch -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 但是推荐使用switch做分支的切换。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;relative group&#34;&gt;merge remote的代码到当前分支 
    &lt;div id=&#34;merge-remote的代码到当前分支&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#merge-remote%e7%9a%84%e4%bb%a3%e7%a0%81%e5%88%b0%e5%bd%93%e5%89%8d%e5%88%86%e6%94%af&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;remote-branch-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;```&lt;/span&gt;·
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;将远程主机 origin 的 master 分支拉取过来，与本地的当前所在分支合并。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# git 合并本地多个提交为一个提交并推送到远程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;假设你需要merge前三个commit为一个单一的commit，运行如下命令：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;```&lt;/span&gt;sh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase -i HEAD~3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后会进入一个界面，将除了第一个提交之外的&lt;code&gt;pick&lt;/code&gt;改成&lt;code&gt;squash&lt;/code&gt;，保存，然后修改提交信息即可。细节可以参考：&lt;a href=&#34;https://stackoverflow.com/a/5721879&#34;   target=&#34;_blank&#34;&gt;
    Combining Multiple Commits Into One Prior To Push&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;git 本地分支管理 
    &lt;div id=&#34;git-本地分支管理&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#git-%e6%9c%ac%e5%9c%b0%e5%88%86%e6%94%af%e7%ae%a1%e7%90%86&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;git 远程从主分支新建一个feature/fix分支后，本地克隆下来，然后最好不要直接就在这个分支上开始开发，把这个分支想象成自己的主分支，再新建分支进行开发，有时候会省很多事。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
