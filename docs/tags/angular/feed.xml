<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on 浮生日记</title>
    <link>https://shadow-diary.fun/tags/angular/</link>
    <description>Recent content in Angular on 浮生日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copy, _right?_ :thinking_face:</copyright>
    <lastBuildDate>Fri, 15 Dec 2023 23:38:41 +0800</lastBuildDate><atom:link href="https://shadow-diary.fun/tags/angular/feed.xml" rel="self" type="application/rss+xml" />
    <item>
<title>Angular Insight Lifecycle</title>
<link>https://shadow-diary.fun/posts/2023/frontend/angular/angular-insight-lifecycle/</link>
<pubDate>Fri, 15 Dec 2023 23:38:41 +0800</pubDate>
      
      <guid>https://shadow-diary.fun/posts/2023/frontend/angular/angular-insight-lifecycle/</guid>
<description>&lt;p&gt;Angular新手可能经常会有和我一样的疑问，我明明已经设置了值呀，为什么还是报读到&lt;code&gt;undefined&lt;/code&gt;错误呢？有两种常见的原因，异步或者生命周期。今天就先来深入了解一下Angular的生命周期（适用于组件，指令等，因为本质上来说，组件也是指令）。&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;Angular Lifecycle 
    &lt;div id=&#34;angular-lifecycle&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#angular-lifecycle&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;官方文档：&lt;a href=&#34;https://angular.cn/guide/lifecycle-hooks&#34;   target=&#34;_blank&#34;&gt;
    组件的生命周期&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;钩子方法&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;时机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ngOnChanges()&lt;/td&gt;
&lt;td&gt;当 Angular 设置或重新设置数据绑定的输入属性时响应。该方法接受当前和上一属性值的 SimpleChanges对象 注意： 这发生得比较频繁，所以你在这里执行的任何操作都会显著影响性能。 欲知详情，参阅本文档的使用变更检测钩子。&lt;/td&gt;
&lt;td&gt;如果组件绑定过输入属性，那么在 ngOnInit() 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。 注意： 如果你的组件没有输入属性，或者你使用它时没有提供任何输入属性，那么框架就不会调用ngOnChanges()。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngOnInit()&lt;/td&gt;
&lt;td&gt;在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。欲知详情，参阅本文档中的初始化组件或指令。&lt;/td&gt;
&lt;td&gt;在第一轮 ngOnChanges() 完成之后调用，只调用一次。而且即使没有调用过 ngOnChanges()，也仍然会调用 ngOnInit()（比如当模板中没有绑定任何输入属性时）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngDoCheck()&lt;/td&gt;
&lt;td&gt;检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。欲知详情和范例，参阅本文档中的自定义变更检测。&lt;/td&gt;
&lt;td&gt;紧跟在每次执行变更检测时的 ngOnChanges() 和 首次执行变更检测时的 ngOnInit() 后调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngAfterContentInit()&lt;/td&gt;
&lt;td&gt;当 Angular 把外部内容投影进组件视图或指令所在的视图之后调用。 欲知详情和范例，参阅本文档中的响应内容中的变更。&lt;/td&gt;
&lt;td&gt;第一次 ngDoCheck() 之后调用，只调用一次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngAfterContentChecked()&lt;/td&gt;
&lt;td&gt;每当 Angular 检查完被投影到组件或指令中的内容之后调用。 欲知详情和范例，参阅本文档中的响应被投影内容的变更。&lt;/td&gt;
&lt;td&gt;ngAfterContentInit() 和每次 ngDoCheck() 之后调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngAfterViewInit()&lt;/td&gt;
&lt;td&gt;当 Angular 初始化完组件视图及其子视图或包含该指令的视图之后调用。 欲知详情和范例，参阅本文档中的响应视图变更。&lt;/td&gt;
&lt;td&gt;第一次 ngAfterContentChecked() 之后调用，只调用一次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngAfterViewChecked()&lt;/td&gt;
&lt;td&gt;每当 Angular 做完组件视图和子视图或包含该指令的视图的变更检测之后调用。&lt;/td&gt;
&lt;td&gt;ngAfterViewInit() 和每次 ngAfterContentChecked() 之后调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ngOnDestroy()&lt;/td&gt;
&lt;td&gt;每当 Angular 每次销毁指令/组件之前调用并清扫。在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。欲知详情，参阅本文档中的在实例销毁时进行清理。&lt;/td&gt;
&lt;td&gt;在 Angular 销毁指令或组件之前立即调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 class=&#34;relative group&#34;&gt;OnChanges 
    &lt;div id=&#34;onchanges&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#onchanges&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;注意，只有在&lt;strong&gt;当前组件或者指令的@Input/@Output绑定的值变化时&lt;/strong&gt;会触发这个函数。另外需要注意的是，如果 @Input 是个对象，对象里面的数据改变但是引用没有变化也不会触发这个函数(这就是为什么经常需要使用&lt;a href=&#34;https://www.lodashjs.com/docs/lodash.cloneDeep&#34;   target=&#34;_blank&#34;&gt;
    lodash的&lt;code&gt;cloneDeep()&lt;/code&gt;&lt;/a&gt;函数进行&lt;strong&gt;深拷贝&lt;/strong&gt;的原因，本质是改变引用地址)。&lt;/p&gt;
&lt;h2 class=&#34;relative group&#34;&gt;DoCheck 
    &lt;div id=&#34;docheck&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#docheck&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://limeii.github.io/2019/06/angular-ngdocheck-onpush-strategy/&#34;   target=&#34;_blank&#34;&gt;
    Angular：ngDoCheck执行时机&lt;/a&gt;&lt;/p&gt;
&lt;h1 class=&#34;relative group&#34;&gt;父子组件生命周期 
    &lt;div id=&#34;父子组件生命周期&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%e7%88%b6%e5%ad%90%e7%bb%84%e4%bb%b6%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;参考自：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/sparkler/p/16864656.html&#34;   target=&#34;_blank&#34;&gt;
    Angular&amp;ndash;父子组件生命周期钩子(lifecycle hooks)执行过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chauhansawatantra.medium.com/angular-lifecycle-execution-flow-from-parent-to-child-component-f6303c42478&#34;   target=&#34;_blank&#34;&gt;
    Angular Lifecycle Execution flow from parent to child component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;




  
  
    
  
  
    &lt;figure&gt;
      
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        srcset=&#34;
        /posts/2023/frontend/angular/angular-insight-lifecycle/image_hubf548cc1f8934f5aa3e1b3e80fb77d0a_148688_330x0_resize_box_3.png 330w,
        /posts/2023/frontend/angular/angular-insight-lifecycle/image_hubf548cc1f8934f5aa3e1b3e80fb77d0a_148688_660x0_resize_box_3.png 660w,
        /posts/2023/frontend/angular/angular-insight-lifecycle/image_hubf548cc1f8934f5aa3e1b3e80fb77d0a_148688_1024x0_resize_box_3.png 1024w,
        /posts/2023/frontend/angular/angular-insight-lifecycle/image_hubf548cc1f8934f5aa3e1b3e80fb77d0a_148688_1320x0_resize_box_3.png 2x&#34;
        src=&#34;https://shadow-diary.fun/posts/2023/frontend/angular/angular-insight-lifecycle/image_hubf548cc1f8934f5aa3e1b3e80fb77d0a_148688_660x0_resize_box_3.png&#34;
        alt=&#34;parent child lifecycle&#34;
      /&gt;
      
      
    &lt;/figure&gt;
  

&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
